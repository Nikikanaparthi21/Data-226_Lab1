# -*- coding: utf-8 -*-
"""New_lab_2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hh0g__EKlF4L5TBeOV4y0kFiyYAJweB7
"""

# dags/part2_train_predict.py
#
# Part 2: (a) Create view (symbol, timestamp date, close) and train model
#         (b) Forecast next 7 days and build final union table
# Connection: snowflake_conn
# Variables (data only): HISTORICAL_TABLE (default "RAW.MARKET_DATA")
#
from airflow import DAG
from airflow.decorators import task
from airflow.models import Variable
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

from datetime import datetime, timedelta

SNOWFLAKE_CONN_ID    = "snowflake_conn"
ADHOC_SCHEMA         = "ADHOC"
ANALYTICS_SCHEMA     = "ANALYTICS"

# Names (match your earlier example)
VIEW_NAME            = f"{ADHOC_SCHEMA}.MARKET_DATA_VIEW"
MODEL_NAME           = f"{ANALYTICS_SCHEMA}.PREDICT_STOCK_PRICE"
FORECAST_TABLE       = f"{ADHOC_SCHEMA}.MARKET_DATA_FORECAST"
FINAL_TABLE          = f"{ANALYTICS_SCHEMA}.MARKET_DATA"

def _sf_cursor():
    hook = SnowflakeHook(snowflake_conn_id=SNOWFLAKE_CONN_ID)
    conn = hook.get_conn()
    try:
        conn.autocommit = False
    except Exception:
        pass
    return conn, conn.cursor()

with DAG(
    dag_id="part2_train_predict",
    start_date=datetime(2025, 9, 29),
    schedule=None,               # trigger manually after Part 1 completes
    catchup=False,
    tags=["Data226","snowflake","ml","part2"],
    default_args={"retries": 2, "retry_delay": timedelta(minutes=5)},
) as dag:

    @task()
    def ensure_schemas():
        conn, cur = _sf_cursor()
        try:
            cur.execute("BEGIN")
            cur.execute(f"CREATE SCHEMA IF NOT EXISTS {ADHOC_SCHEMA}")
            cur.execute(f"CREATE SCHEMA IF NOT EXISTS {ANALYTICS_SCHEMA}")
            cur.execute("COMMIT")
        except Exception:
            try: cur.execute("ROLLBACK")
            except Exception: pass
            raise
        finally:
            cur.close(); conn.close()

    @task()
    def train():
        """Create view(symbol, date(timestamp), close) and train/replace model."""
        src_table = Variable.get("HISTORICAL_TABLE", default_var="RAW.MARKET_DATA")

        create_view_sql = f"""
            CREATE OR REPLACE VIEW {VIEW_NAME} AS
            SELECT
              SYMBOL,
              TO_TIMESTAMP_NTZ(DATE) AS DATE,
              CLOSE::FLOAT AS CLOSE
            FROM {src_table}
        """
        create_model_sql = f"""
            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST {MODEL_NAME} (
              INPUT_DATA        => TABLE({VIEW_NAME}),
              SERIES_COLNAME    => 'SYMBOL',
              TIMESTAMP_COLNAME => 'DATE',
              TARGET_COLNAME    => 'CLOSE',
              CONFIG_OBJECT     => OBJECT_CONSTRUCT('method','fast','frequency','1 day','evaluate',true)
            )
        """
        conn, cur = _sf_cursor()
        try:
            cur.execute("BEGIN")
            cur.execute(create_view_sql)
            cur.execute(create_model_sql)
            cur.execute("COMMIT")
        except Exception:
            try: cur.execute("ROLLBACK")
            except Exception: pass
            raise
        finally:
            cur.close(); conn.close()

    @task()
    def predict_and_union():
        """Write 7d forecasts to ADHOC.MARKET_DATA_FORECAST and rebuild ANALYTICS.MARKET_DATA with UNION ALL."""
        src_table = Variable.get("HISTORICAL_TABLE", default_var="RAW.MARKET_DATA")
        conn, cur = _sf_cursor()
        try:
            cur.execute("BEGIN")

            # Forecast next 7 days (table function) -> forecast table
            cur.execute(f"""
                CREATE OR REPLACE TABLE {FORECAST_TABLE} AS
                SELECT
                  REPLACE(TO_VARCHAR(SERIES), '"','') AS SYMBOL,
                  CAST(TS AS DATE)                    AS DATE,
                  FORECAST,
                  LOWER_BOUND,
                  UPPER_BOUND
                FROM TABLE({MODEL_NAME}!FORECAST(
                    FORECASTING_PERIODS => 7,
                    CONFIG_OBJECT       => OBJECT_CONSTRUCT('prediction_interval', 0.95)
                ))
            """)

            # Final UNION table: actuals + forecasts
            cur.execute(f"""
                CREATE OR REPLACE TABLE {FINAL_TABLE} AS
                SELECT
                    SYMBOL, DATE, OPEN, HIGH, LOW, CLOSE, VOLUME,
                    NULL::FLOAT AS FORECAST_CLOSE,
                    NULL::FLOAT AS LOWER_BOUND,
                    NULL::FLOAT AS UPPER_BOUND,
                    'ACTUAL'    AS SOURCE
                FROM {src_table}
                UNION ALL
                SELECT
                    SYMBOL, DATE,
                    NULL::FLOAT AS OPEN,
                    NULL::FLOAT AS HIGH,
                    NULL::FLOAT AS LOW,
                    NULL::FLOAT AS CLOSE,
                    NULL::NUMBER AS VOLUME,
                    FORECAST     AS FORECAST_CLOSE,
                    LOWER_BOUND,
                    UPPER_BOUND,
                    'FORECAST'   AS SOURCE
                FROM {FORECAST_TABLE}
            """)

            cur.execute("COMMIT")
        except Exception:
            try: cur.execute("ROLLBACK")
            except Exception: pass
            raise
        finally:
            cur.close(); conn.close()

    _schemas = ensure_schemas()
    _train   = train()
    _final   = predict_and_union()
    _schemas >> _train >> _final